
parameters:
- name: tenant
  displayName: Tenant to rollback
  type: string
  default: 'Staging'
  values:
  - Staging
  - Tenant1
  - Tenant2
  - Tenant3

variables:
  - name: 'vmImageName'
    value: 'ubuntu-latest'
  - name: 'serviceConnectionName'
    value: '<service-connection-name>'
  - name: 'appName'
    value: 'sample-saas'
  - name: 'defaultLocation'
    value: 'westeurope'
  - name: 'TenantName'
    value: ''
  - name: 'ApiServer'
    value: ''
  - name: 'AppServer'
    value: ''
  - name: 'UseAzureAppConfig'
    value: true
  - name: 'EvolveEnabled'
    value: false

resources:
  pipelines:
    - pipeline: api-ci
      source: 'sample-saas-api-ci'
    - pipeline: web-ci
      source: 'sample-saas-frontend-ci'

pool:
  vmImage: $(vmImageName)

trigger: none
pr: none

jobs:
  - deployment: Deploy
    displayName: 'Rollback'
    environment: '${{ parameters.tenant }}'
    pool:
      vmImage: $(vmImageName)     
    strategy:
      runOnce:
        deploy:
          steps:

            - checkout: self
              displayName: 'Checkout'
              
            - download: api-ci
              displayName: 'Download Artifacts for Api'
              artifact: drop

            - download: web-ci
              displayName: 'Download Artifacts for Web'
              artifact: drop

            ##Assign the role for 
            - task: AzureCLI@2
              displayName: 'Get app names from resource group'
              inputs:
                azureSubscription: $(serviceConnectionName)
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  # set the tenant
                  $tenant = "${{ parameters.tenant }}"
                  
                  # set the api app name
                  $apiAppName = az webapp list -g $tenant --query "sort_by(@, &name)[0].name" --output tsv
                  
                  # set the web app nmame
                  $webAppName = az webapp list -g $tenant --query "sort_by(@, &name)[1].name" --output tsv

                  # get the urls
                  $apiAppUrl = az webapp show --name $apiAppName --resource-group $tenant --query enabledHostNames[0] --output tsv
                  $apiAppUrl = "https://$apiAppUrl"
                  $webAppUrl =  az webapp show --name $webAppName --resource-group $tenant --query enabledHostNames[0] --output tsv
                  $webAppUrl = "https://$webAppUrl"

                  Write-Host "##vso[task.setvariable variable=TenantName;]$tenant"
                  Write-Host "##vso[task.setvariable variable=apiAppName;]$apiAppName"
                  Write-Host "##vso[task.setvariable variable=ApiServer;]$apiAppUrl"
                  Write-Host "##vso[task.setvariable variable=webAppName;]$webAppName"
                  Write-Host "##vso[task.setvariable variable=AppServer;]$webAppUrl"
                #powerShellErrorActionPreference: 'silentlyContinue'   

            #Replacements before deployment
            - task: FileTransform@2
              displayName: 'Replace Api'
              inputs:
                folderPath: '$(Pipeline.Workspace)/api-ci/drop/publish/publish.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
                jsonTargetFiles: '**/appsettings.json'
                xmlTargetFiles: ''
                xmlTransformationRules: ''

            #Replacements before deployment
            - task: FileTransform@2
              displayName: 'Replace Web'
              inputs:
                folderPath: '$(Pipeline.Workspace)/web-ci/drop/publish/publish.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
                jsonTargetFiles: '**/appsettings.json'
                xmlTargetFiles: ''
                xmlTransformationRules: ''
            
            ##Deploy the app services
            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy Api App'
              inputs:
                azureSubscription: $(serviceConnectionName)
                appType: 'webApp'
                WebAppName: $(apiAppName)
                ResourceGroupName: ${{ parameters.tenant }}
                package: '$(Pipeline.Workspace)/api-ci/drop/publish/publish.zip'

            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy Web App'
              inputs:
                azureSubscription: $(serviceConnectionName)
                ResourceGroupName: ${{ parameters.tenant }}
                appType: 'Web App On Windows'
                WebAppName: $(webAppName)
                package: '$(Pipeline.Workspace)/web-ci/drop/publish/publish.zip'  

